<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>JengChen</title>
 <updated>2013-11-16T16:37:47+08:00</updated>
 <id>http://jengchen.github.com/</id>
 <author>
   <name>JengChen</name>
   <email>chenfjm@gmail.com</email>
 </author>

 
 <entry>
   <title>VS使用技巧</title>
   <link href="http://jengchen.github.com/2013/03/15/VS-%E4%BD%BF-%E7%94%A8-%E6%95%99-%E7%A8%8B.html"/>
   <updated>2013-03-15T00:00:00+08:00</updated>
   <id>http://jengchen.github.com/2013/03/15/VS-使-用-教-程</id>
   <content type="html">&lt;p&gt;很多人都在用VS编写代码，但是大多数人只是用它来写代码而已，殊不知它还有很多强大的功能。一旦你领略到
它的强大之处，你将会发现写程序是件很快乐的事情。它有太多的使用技巧值得我们学习。&lt;/p&gt;

&lt;p&gt;安装应该是最简单的，我想用过Windows的程序员应该都会吧。最主要的是配置开发环境，首先是配置全局，再配
置局部。加载第三方库、头文件都是最基本的，这些在Tools-&gt;Option下配置。接下来是配置工程，在每个工程的
属性里可以配置。就是一些工程目录、输入输出、调试链接之类的。以上这些应该是很基本的，也是我们必须掌
握的。&lt;/p&gt;

&lt;p&gt;首先看主题的配置，为什么要配置主题呢？主要是保护眼,不容易使眼睛产生疲劳。
建议使用consoal + 雅黑，下载地址：
&lt;a href=&quot;https://www.dropbox.com/s/zw21x0i5p62rrrq/Exported-2013-03-15.vssettings&quot;&gt;YaHei.Consolas&lt;/a&gt;
然后放到系统的字体中,使用下面的主题自动默认加载进去。
主题下载链接：&lt;a href=&quot;https://www.dropbox.com/s/zw21x0i5p62rrrq/Exported-2013-03-15.vssettings&quot;&gt;Exported.vssettings&lt;/a&gt;
配置主题在Tools-&gt;Import and Export settings中。&lt;/p&gt;

&lt;p&gt;文本编辑器的熟练使用也是很重要的，在编辑代码中，经常需要插入代码，在上一行写代码，删除某一个单词，
或者在后一行插入代码等操，作使用快捷键可以节省我们很多时间。&lt;/p&gt;

&lt;p&gt;功能                                快捷键&lt;/p&gt;

&lt;p&gt;在前一行插入代码                    Ctrl+Enter&lt;/p&gt;

&lt;p&gt;在下一行插入代码                    Ctrl+Shfit+Enter&lt;/p&gt;

&lt;p&gt;选中单词                            Ctrl+W&lt;/p&gt;

&lt;p&gt;删除前一个单词                       Ctrl+BackSpace&lt;/p&gt;

&lt;p&gt;删除后一个单词                       Ctrl+delete&lt;/p&gt;

&lt;p&gt;删除一行                            Ctrl+Shift+L&lt;/p&gt;

&lt;p&gt;剪切一行                            Ctrl+L&lt;/p&gt;

&lt;p&gt;把单词/选中部分改为大写             Ctrl+Shift+U&lt;/p&gt;

&lt;p&gt;把单词/选中部分改为小写             Ctrl+U&lt;/p&gt;

&lt;p&gt;撤销                              Ctrl+Z&lt;/p&gt;

&lt;p&gt;恢复                              Ctrl+Y&lt;/p&gt;

&lt;p&gt;添加代码注释                      Ctrl+K+C&lt;/p&gt;

&lt;p&gt;取消代码注释                      Ctrl+K+U&lt;/p&gt;

&lt;p&gt;向前定位                            Ctrl+&lt;/p&gt;

&lt;p&gt;向后定位                            Ctrl+Shift+&lt;/p&gt;

&lt;p&gt;通过键盘访问导航栏                 Ctrl+Tab&lt;/p&gt;

&lt;p&gt;只在打开的窗口之间便利               Ctrl+F6&lt;/p&gt;

&lt;p&gt;列出有多个文件的下拉条               Ctrl+Shift+DownArrow&lt;/p&gt;

&lt;p&gt;打开Solution Explorer             Ctrl+Shift+L&lt;/p&gt;

&lt;p&gt;打开Class View                        Ctrl+Shift+C&lt;/p&gt;

&lt;p&gt;打开资源                            Ctrl+Shift+E&lt;/p&gt;

&lt;p&gt;开启可见空白                      Ctrl+R+W&lt;/p&gt;

&lt;p&gt;添加书签                            Ctrl+K+K&lt;/p&gt;

&lt;p&gt;删除某处的标签                       Ctrl+K+K&lt;/p&gt;

&lt;p&gt;删除所有的标签                       Ctrl+K+L&lt;/p&gt;

&lt;p&gt;搜索单词                            Ctrl+F3&lt;/p&gt;

&lt;p&gt;搜索上一个单词                       Ctrle+Shift+F3&lt;/p&gt;

&lt;p&gt;渐进式搜索                         Ctrl+I&lt;/p&gt;

&lt;p&gt;快速搜索                            Ctrl+D&lt;/p&gt;

&lt;p&gt;全能搜索                            Ctrl+F&lt;/p&gt;

&lt;p&gt;替换                              Ctrl+H&lt;/p&gt;

&lt;p&gt;最重要的是VA的使用，VA是VS的一个插件,由一个公司专门开发的，如果说会用快捷键是我们前进一小步，那么掌
握VA的使用技巧就是我们前进了一大步。由于我们已经配置过主题了，所以在VA中就配置使用当前主题，因为自
己手动很难找到比较合适的。&lt;/p&gt;

&lt;p&gt;VA里面智能提示应该算是最重要的，智能提示主要是通过配置脚本实现的。当有一个函数的参数很长，但是你记不
住，这个时候VA的提示功能就派上用场了。当我们输入if它就会自动提示出if(){…}或者if(){…}else{}这样的代码，
省去我们输入的麻烦了。&lt;/p&gt;

&lt;p&gt;VA还有自动创建功能，这个功能在VA的Refactor中。在编辑区，点击右键我们选择CreateImplementation，它就会
对函数的声明自动生成实现框架，我们只要往里面添加代码就行，这是自动创建。
一般我们写完一个函数要手动去给它写注释，这个时候你就可以直接点击DocumentMethod就会默认在这个函数的上面写上注
释，这就是函数注释功能。
还有一个Refactor中的 Extra Method，功能，快速重构某段代码，使其某段代码生成一个函数首先选中某段代码，然后点
击右键，就会出现这个功能。&lt;/p&gt;

&lt;p&gt;VA还自动帮你分析了，你要使用说明参数，如果你觉得这个参数不合适，自行修正就是了。注意最左线那个箭头指向的
Extract to Source 你不选中，默认把此函数的实现放在.h中，如果要想把函数的实现和声明分开，选中此功能。&lt;/p&gt;

&lt;p&gt;虽然VA提供了很多模板，但是那些模板都是通用的，可能不满足我们的要求，其实我们可以完全搞一个，而且加上快
捷键。VA的工程管理，主要讲的是，使用一些快捷键快速切换文件，查找Reference，快去切换某个类的.h和cpp文件，
等功能，总之就是弥补VS目前提供的功能不足的地方。VA还有很多有用的功能只是我们还没有发现，当我们遇到不懂
的可以去它的官网看看，它的帮助文档还是很详细的，我们上面说的那里都有。&lt;/p&gt;

&lt;p&gt;磨刀不误砍柴工，只要我们把工具熟练掌握了，工作效率自然会提高的。一个程序员编程水平再高，但是他的工作效
率低下也是不可取的。虽然以上这些功能都是在VS2008下试验的，但是举一反三，我们不难在VS2010或VS2012下照样
使用这些功能。总之，我们应该熟练使用VS，达到一种写代码就像玩一样的境界。这样我们就会将敲代码看作是一件
很快乐的事情。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C++代码规范</title>
   <link href="http://jengchen.github.com/2013/03/11/C-%2B-%2B-%E4%BB%A3-%E7%A0%81-%E8%A7%84-%E8%8C%83.html"/>
   <updated>2013-03-11T00:00:00+08:00</updated>
   <id>http://jengchen.github.com/2013/03/11/C-+-+-代-码-规-范</id>
   <content type="html">&lt;p&gt;对代码规范的理解是每个人只要有自己的规范就行，代码是给自己看的，有多少个程序员就有多少种代码规范。而且一
直认为编码规范没有什么用处，我坚信这是浪费大家的编编程时间、影响效率的东西，我是大错特错了。&lt;/p&gt;

&lt;p&gt;代码规范里不仅有编写代码的格式建议、命名约定、注释风格这样的东西，还有像头文件、类、作用域这些使用经验。
首先是头文件的用法，避免多重包含是学编程时最基本的要求;编写头文件时应该使用 #define 防止头文件被多重包含；为
保证唯一性,头文件的命名应该依据所在项目源代码树的全路径；使用前置声明可以显著减少需要包含的头文件数量；使用标准的
头文件包含顺序可增强可读性,项目内头文件应按照项目源代码目录树结构排列；前置声明是为了降低编译依赖。&lt;/p&gt;

&lt;p&gt;作用域的使用，名字空间将全局作用域细分为独立的,具名的作用域,可有效防止全局作用域的命名冲突。名字空间分为匿名
名字空间和具名名字空间，不建议在.h文件中使用匿名名字空间；当公有嵌套类作为接口的一部分时,虽然可以直接将他们保持
在全局作用域中,但将嵌套类的声明置于名字空间内是更好的选择。当嵌套类只被外围类使用时非常有用;把它作为外围类作用域
内的成员,而不是去污染外部作用域的同名类。嵌套类可以在外围类中做前置声明, 然后在 .c文件中定义, 这样避免在外围类的
声明中定义嵌套类, 因为嵌套类的定义通常只与实现相关。
使用静态成员函数或名字空间内的非成员函数,尽量不要用裸的全局函数。某些情况下,非成员函数和静态成员函数是非常有
用的,将非成员函数放在名字空间内可避免污染全局作用域。定义在同一编译单元的函数,被其他编译单元直接调用可能会引入不
必要的耦合和链接时依赖;静态成员函数对此尤其敏感.。可以考虑提取到新类中, 或者将函数置于独立库的名字空间内。&lt;/p&gt;

&lt;p&gt;变量的使用，将函数变量尽可能置于最小作用域内,并在变量声明时进行初始化C++允许在函数的任何位置声明变量。我们提
倡在尽可能小的作用域中声明变量,离第一次使用越近越好。这使得代码浏览者更容易定位变量声明的位置,了解变量的类型和初
始值。禁止用用 class类型的静态或全局变量，它们会导致很难发现bug和不确定的构造和析构函数调用顺序。静态生存周期的对
象, 包括全局变量,静态变量,静态类成员变量, 以及函数静态变量,都必须是原生数据类型。静态变量的构造函数,析构函数以及
初始化操作的调用顺序在 C++ 标准中未明确定义,甚至每次编译构建都有可能会发生变化, 从而导致难以发现的bug。&lt;/p&gt;

&lt;p&gt;类的使用，构造函数中很难上报错误,不能使用异常，操作失败会造成对象初始化失败，进入不确定状态。如果在构造函数内
调用了自身的虚函数,这类调用是不会重定向到子类的虚函数实现。如果一个类定义了若干成员变量又没有其它构造函数,必须定
义一个默认构造函数。否则编译器将自动生产一个很糟糕的默认构造函数。防止隐式转换可用显示构造函数。仅在代码中需要拷
贝一个类对象的时候使用拷贝构造函数。truct用来定义包含数据的被动式对象,也可以包含相关的常量,但除了存取数据成员之外 ,没有别的函数功能。如果需要更多的函数功能,class更适合。&lt;/p&gt;

&lt;p&gt;C++实践中,继承主要用于两种场合实现继承，子类继承父类的实现代码;接口继承，子类仅继承父类的方法名称。真正需要用到
多重实现继承的情况少之又少。只在以下情况我们才允许多重继承最多只有一个基类是非抽象类。除少数特定环境外，不要重载运算
符。将所有数据成员声明为private,并根据需要提供相应的存取函数，一般在头文件中把存取函数定义成内联函数。在类中使用特定
的声明顺序public在private之前,成员函数在数据成员前;类的 访问控制区段的声明顺序依次为public,protected,private。如果某
区段没内容, 可以不声明。&lt;/p&gt;

&lt;p&gt;C++的其他特性还有引用参数，友元，异常，运行时类型识别，类型转换，流，前置自增和自减，const的使用，预处理宏，0
和NULL，Boost库等等。最后就是一些使用约定，包括命名规则，注释风格等简单的规定。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>从面向过程到面向对象</title>
   <link href="http://jengchen.github.com/2013/03/08/%E4%BB%8E-%E9%9D%A2-%E5%90%91-%E8%BF%87-%E7%A8%8B-%E5%88%B0-%E9%9D%A2-%E5%90%91-%E5%AF%B9-%E8%B1%A1.html"/>
   <updated>2013-03-08T00:00:00+08:00</updated>
   <id>http://jengchen.github.com/2013/03/08/从-面-向-过-程-到-面-向-对-象</id>
   <content type="html">&lt;p&gt;要想有从面向过程到面向对象的转变，首先得搞懂什么是面向过程，什么是面向对象，为什么要从面向过程到面向对象这种转变。&lt;/p&gt;

&lt;p&gt;首先你应该了解面向过程和面向对象的一些基础知识，涉及到的内容包括编译、汇编、低级语言、高级语言等等。面向对象的三大特性是封装、继承和多态。&lt;/p&gt;

&lt;p&gt;在面向过程的语言随着代码数量的爆炸性增长和工程文件的不断扩充，我们就很难对工程进行管理了。当有少数代码时我们还可以对其中的函数变量进行操作，代码变多我们就无从下手了，自己写过的代码也早就忘得一干二净了。这时我们可以归类，把实现功能相同的一些函数和数据放到一个文件内，要学会归类管理。一个.h文件对应一个.c文件，当函数变得很多并且参数也很
很多时我们感到代码的可读性已经变得很差了。这时候我们运用了面向对象中的一个特性——封装性，把相关联的函数和变量放到一个类中。这样不仅可以好进行管理，还使代码变得更更易读。面向过程出现了问题，人们要解决问题于是就有了封装。可见面向对象技术不是凭空出现的，而是人们经过多次尝试才总结出的用来解决问题的。&lt;/p&gt;

&lt;p&gt;多态也是很重要的，编译时的多态是用重载实现的，运行时的多态是用虚函数实现的。有时候我们在编译时还不能确定该调用哪个函数，这样就不得不在一个函数里用if…els
se…去调用多个函数，还要依次实现每一个函数，这不仅使得系统难理解还要浪费大量的时间。而用面向对象中的多态只用一个函数就可以实现，因为面向对象中有动态绑定的机制。
多态是用虚函数实现的，内部是用虚表实现的。&lt;/p&gt;

&lt;p&gt;在一般情况下要实现根据不同的子类调用不同的函数我们只参考一个子类。但是有时候要根据两个子类或者更多的子类来决定，假如有一个小游戏，在太空中有三种不同的战斗机A、B、C。当A打中B时出现一种事件，当A打中C时出现另一种事件，这三种战斗机两两一共会出现6中不同的事件。我们咋样用多态的机制去实现这种情况呢？在C语言中也可以实现，但是难度是可想而知的。但是在面向对象这样的高级语言中很简单，运用设计模式中的访问者模式就解决了。用面向对象还是有很多优势的，我们碰到的很多问题都是别人之前碰到的，有些人会把这种解决问题的方法记录下来帮助在遇到类似问题的人。这也是面向对象编程的好处。&lt;/p&gt;

&lt;p&gt;是不是感到面向对象变得很重要呢？继承更符合实际生活中的客观规律，我们的生活中到处都有继承。继承既体现了封装的特性又有多态的特点，因此继承是封装与多态的交合。。在面向对象这样的高级语言中继承不仅是符合人们常规的思考问题的方式，而且简化了人们对系统认识的难度，还可以对大量的代码进行复用。像继承、重载、多态这样的机制在C语言中也可以实现。封装可以用struct结构体实现，继承可以用组合的形式模拟，多态可以用回调函数实现。像linux设备驱动程序中的设备驱动模型虽然用C语言编写但是
完全体现了面向对象的思想。&lt;/p&gt;

&lt;p&gt;既然C语言也可以实现面向对象的三种特性，那为什么还会有C++这样的语言出现？其实这只是人们思考问题的角度不同，所站的层次不同。如果用C语言去实现这种特性我们得
得编写好多代码，而C++编译器已经实现了这种机制，所以用C++可以很轻松的实现。那为什么C编译器没有这种机制呢？那是因为C语言也有自己的优势，那就是操作硬件，所以
以我们也不能完全否定面向对象，一种语言不能把所有机制都包括进去，所谓鱼与熊掌不可皆得。&lt;/p&gt;

&lt;p&gt;到底是该使用面向过程还是面向对象，取决于自己的项目。最后附上面向对象的开发过程：&lt;/p&gt;

&lt;p&gt;1.在问题域和解决域中找出对象；&lt;/p&gt;

&lt;p&gt;2.确定对象的操作，包括共有操作和私有擦做；&lt;/p&gt;

&lt;p&gt;3.分析对象间的关系；&lt;/p&gt;

&lt;p&gt;4.设计对象的调用方式；分析对象的外部特性，将具有相同外部特性的归为一类；&lt;/p&gt;

&lt;p&gt;5.确定类间的继承关系；设计每个类关于对象外部特性的描述；&lt;/p&gt;

&lt;p&gt;6.设计类的内部实现；&lt;/p&gt;

&lt;p&gt;7.创建所需的对象，实现队象间调用。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>利用Jekyll搭建个人网站</title>
   <link href="http://jengchen.github.com/2013/02/06/how-to-create-website%26blog-with-jekyll.html"/>
   <updated>2013-02-06T00:00:00+08:00</updated>
   <id>http://jengchen.github.com/2013/02/06/how-to-create-website&blog-with-jekyll</id>
   <content type="html">&lt;p&gt;1.安装&lt;/p&gt;

&lt;p&gt;安装&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;&lt;br/&gt;
安装&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;DevKit&lt;/a&gt;&lt;br/&gt;
安装Jekyll：$ gem install jekyll&lt;/p&gt;

&lt;p&gt;2.创建版本库&lt;/p&gt;

&lt;p&gt;登陆你的&lt;a href=&quot;http://github.com&quot;&gt;Github账户&lt;/a&gt;，创建一个新的版本库，命名为USERNAME.github.com&lt;br/&gt;
安装Jekyll-Bootstrap:
    $ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
    $ cd USERNAME.github.com
    $ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git
    $ git push origin master
如果你安装了Jekyll，你可以在本地预览你的Blog:
    $ git clone https://github.com/plusjade/jekyll-bootstrap.git
    $ cd jekyll-bootstrap
    $ jekyll --server
在浏览器预览http://localhost:4000.&lt;/p&gt;

&lt;p&gt;3.创建第一篇博文&lt;/p&gt;

&lt;p&gt;$ rake post title=&quot;posttitle&quot;
默认情况下rake命令会在你的_posts目录下创建一个名为[年-月-日-posttitle.md]的文件，名称中的空格会转换成“-”，时间为当前系统时间。&lt;/p&gt;

&lt;p&gt;4.创建第一个页面&lt;/p&gt;

&lt;h1&gt;根目录下创建页面&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;about.md&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;自定义目录下创建页面&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;pages/about.md&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;创建类似./pages/about/index.html目录结构的页面&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ rake page name=&quot;pages/about&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.发布&lt;/p&gt;

&lt;p&gt;完成一篇博文或者做一些修改之后可以用简单的git命令提交到远程的Github版本库。同时Github可以将md文件解析成html文件，通过    USERNAME.github.com就可以访问刚才提交的博文。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;description&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然你还可以运用一些预置的主题，做一些自定义的配置，以及自己定义主题增加模板配置文件、增加Blog挂件、加入Google Analytics、Disqus等等&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
